generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                 BigInt
  issue_id           BigInt
  org                String?   @db.VarChar
  repo               String?   @db.VarChar
  event              String?   @db.VarChar
  body               String?   @db.VarChar
  label              Json?
  reactions          Json?
  created_at         DateTime? @db.Timestamp(6)
  node_id            String?   @db.VarChar
  user               Json?
  username           String?   @db.VarChar
  updated_at         DateTime? @db.Timestamp(6)
  author_association String?   @db.VarChar

  @@id([id, issue_id])
  @@map("events")
}

model event_polls {
  id               BigInt
  page_no          Int
  issue_updated_at DateTime? @db.Timestamp(6)
  etag             String?   @db.VarChar

  @@id([id, page_no])
}

model issues {
  id                       BigInt    @id @default(autoincrement())
  active_lock_reason       String?   @db.VarChar
  assignee                 Json?
  assignees                Json[]    @db.Json
  author_association       String?   @db.VarChar
  body                     String?   @db.VarChar
  closed_at                DateTime? @db.Timestamp(6)
  comments                 Int?
  comments_url             String?   @db.VarChar
  created_at               DateTime? @db.Timestamp(6)
  events_url               String?   @db.VarChar
  html_url                 String?   @db.VarChar
  labels                   Json[]    @db.Json
  labels_url               String?   @db.VarChar
  locked                   Boolean?
  milestone                Json?
  node_id                  String?   @db.VarChar
  number                   Int?
  org                      String?   @db.VarChar
  performed_via_github_app String?   @db.VarChar
  reactions                Json?
  repo                     String?   @db.VarChar
  repository_url           String?   @db.VarChar
  score                    Float?
  state                    String?   @db.VarChar
  timeline_url             String?   @db.VarChar
  title                    String?   @db.VarChar
  updated_at               DateTime? @db.Timestamp(6)
  url                      String?   @db.VarChar
  user                     Json?
  username                 String?   @db.VarChar
}

model members {
  id                  Int       @id @default(autoincrement())
  avatar_url          String?   @db.VarChar
  events_url          String?   @db.VarChar
  followers_url       String?   @db.VarChar
  following_url       String?   @db.VarChar
  gists_url           String?   @db.VarChar
  gravatar_id         String?   @db.VarChar
  html_url            String?   @db.VarChar
  login               String?   @unique(map: "unique_login") @db.VarChar
  node_id             String?   @db.VarChar
  organizations_url   String?   @db.VarChar
  received_events_url String?   @db.VarChar
  repos_url           String?   @db.VarChar
  site_admin          Boolean?
  starred_url         String?   @db.VarChar
  subscriptions_url   String?   @db.VarChar
  type                String?   @db.VarChar
  url                 String?   @db.VarChar
  inserted_dt         DateTime? @db.Timestamp(6)
  inactive_dt         DateTime? @db.Timestamp(6)
  inactive            Boolean?  @default(false)
}

model pull_requests {
  id                       BigInt    @id @default(autoincrement())
  url                      String?   @db.VarChar
  repo                     String?   @db.VarChar
  org                      String?   @db.VarChar
  repository_url           String?   @db.VarChar
  labels_url               String?   @db.VarChar
  comments_url             String?   @db.VarChar
  events_url               String?   @db.VarChar
  html_url                 String?   @db.VarChar
  node_id                  String?   @db.VarChar
  number                   Int?
  title                    String?   @db.VarChar
  user                     Json?
  username                 String?   @db.VarChar
  labels                   Json[]    @db.Json
  state                    String?   @db.VarChar
  locked                   Boolean?
  assignee                 Json?
  assignees                Json[]    @db.Json
  milestone                Json?
  comments                 Int?
  created_at               DateTime? @db.Timestamp(6)
  updated_at               DateTime? @db.Timestamp(6)
  closed_at                DateTime? @db.Timestamp(6)
  author_association       String?   @db.VarChar
  active_lock_reason       String?   @db.VarChar
  draft                    Boolean?
  pull_request             Json?
  body                     String?   @db.VarChar
  reactions                Json?
  timeline_url             String?   @db.VarChar
  performed_via_github_app String?   @db.VarChar
  score                    Int?
  merged                   Boolean?
}

model pending {
  id             Int       @id
  repo           String?
  repo_display   String?
  title          String?
  number         Int
  html_url       String?
  username       String?
  comments       Int?
  avatar         String?
  assignee       Json?
  created_at     DateTime? @db.Timestamp(6)
  updated_at     DateTime? @db.Timestamp(6)
  state          String?
  evt_updated_at DateTime? @db.Timestamp(6)
  max_date       DateTime? @db.Timestamp(6)
}

model trendingOpen {
  id         Int       @id
  number     Int
  rank       Int
  repo       String?
  title      String?
  html_url   String?
  assignee   Json?
  assignees  Json[]    @db.Json
  username   String?
  avatar     String?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  r_comments Int
  r_p1       Int       @map("r_+1")
  r_m1       Int       @map("r_-1")
  r_eyes     Int
  r_heart    Int
  r_laugh    Int
  r_hooray   Int
  r_rocket   Int
  r_confused Int
  r_tc       Int
  p1         Int       @map("+1")
  m1         Int       @map("-1")
  eyes       Int
  heart      Int
  laugh      Int
  hooray     Int
  rocket     Int
  confused   Int
  tc         Int

  @@map("trending_open")
}
